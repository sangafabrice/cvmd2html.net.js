<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cvmd2html" xml:space="preserve">
    <value>Try { &amp; {
[CmdletBinding()]
Param (
  [Parameter(Mandatory, Position=0)]
  [ValidateScript({Test-Path $_ -PathType Leaf})]
  [ValidatePattern('\.md$')]
  [string] $MarkdownPath,
  [Parameter(Position=1)]
  [ValidatePattern('\.html?$')]
  [string] $HtmlPath = [System.IO.Path]::ChangeExtension($MarkdownPath, '.html'),
  [switch] $OverWrite
)
Function ShowMessageBox($Message, $HtmlPath, $MessageType) {
  $DefaultType = 'Error'
  If ([string]::IsNullOrEmpty($MessageType)) {
    $MessageType = $DefaultType
  }
  Add-Type -AssemblyName PresentationFramework
  If (
    [System.Windows.MessageBox]::Show(
      ($Message -f $HtmlPath),
      'Convert Markdown to HTML',
      $(
        If ($MessageType -eq $DefaultType) {
          'OK'
        } Else {
          'YesNo'
        }
      ),
      $MessageType
    ) -in ('No','OK')
  ) {
    Exit
  }
}
If (Test-Path $HtmlPath -PathType Leaf) {
  If (-not $OverWrite) {
    ShowMessageBox ('The file "{0}" already exists.' + "`n`nDo you want to overwrite it?") $HtmlPath 'Exclamation'
  }
} ElseIf (Test-Path $HtmlPath) {
  ShowMessageBox '"{0}" cannot be overwritten because it is a directory.' $HtmlPath
}
Try {
  $CommandOutput = &amp; (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\pwsh.exe\').'(default)' -nol -ep Bypass -noni -nop -cwa 'try { (ConvertFrom-Markdown $args[0] -ErrorAction Stop).Html } catch { Write-Error $_.Exception.Message }' $MarkdownPath 2&gt;&amp;1
  If ($LASTEXITCODE -ne 0) {
    Write-Host $CommandOutput
    Throw ($CommandOutput -replace '(\x1B\[31;1m)|(\x1B\[0m)').Substring('Write-Error:'.Length + 1)
  }
  $CommandOutput | Out-File $HtmlPath
} Catch {
  ShowMessageBox $_.Exception.Message
}
} -Markdown $MarkdownPath } Catch { Throw $_.Exception }</value>
  </data>
</root>